!function(r){function n(o){if(a[o])return a[o].exports;var e=a[o]={exports:{},id:o,loaded:!1};return r[o].call(e.exports,e,e.exports,n),e.loaded=!0,e.exports}var a={};return n.m=r,n.c=a,n.p="",n(0)}([function(r,n,a){AFRAME.registerShader("pano-portal",{schema:{src:{type:"map",is:"uniform"},warpParams:{type:"vec4",is:"uniform",default:"-1.0 1.5 0.0 0.0"}},vertexShader:a(2),fragmentShader:a(1)})},function(r,n){r.exports="#define M_PI 3.1415926535897932384626433832795\r\nuniform sampler2D src;\r\nuniform vec4 warpParams;\r\nvarying vec3 worldNormal;\r\nvarying vec3 worldViewDir;\r\nvarying float warpAlpha;\r\n\r\nvec3 panoMap(vec3 vdir) {\r\n  float r = length(vdir.xz);  // sqrt(vdir.x * vdir.x + vdir.z * vdir.z);\r\n  float theta = atan(vdir.z, vdir.x) / M_PI;\r\n  float phi = atan(vdir.y, r) / M_PI;\r\n  vec2 uv = vec2(theta*0.5 + 0.5, phi + 0.5);\r\n  return texture2D(src, uv).rgb;\r\n}\r\n\r\nvoid main() {\r\n  vec3 nn = normalize(worldNormal);\r\n  vec3 ndir = normalize(worldViewDir);\r\n  vec3 sampleDir = (warpAlpha)*ndir + (1.0 - warpAlpha)*nn;\r\n  gl_FragColor.rgb = panoMap(sampleDir);\r\n  gl_FragColor.a = 1.0;\r\n}\r\n"},function(r,n){r.exports="uniform vec4 warpParams;\r\nvarying vec3 worldNormal;\r\nvarying vec3 worldViewDir;\r\nvarying float warpAlpha;\r\n\r\nvoid main(void) {\r\n  vec4 zeroPos = modelMatrix * vec4(0.0, 0.0, 0.0, 1.0);\r\n  float distToZero = length(cameraPosition - zeroPos.xyz);\r\n  warpAlpha = clamp(warpParams.x * distToZero + warpParams.y, 0.0, 1.0);\r\n  vec4 worldPos = modelMatrix * vec4(position, 1.0);\r\n  worldViewDir = worldPos.xyz - cameraPosition;\r\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n  worldNormal = (modelMatrix * vec4(normal.xyz, 0.0)).xyz;\r\n}\r\n"}]);